{"version":3,"sources":["microphoneClient.jsx"],"names":["window","socket","io","noSleep","NoSleep","MicrophoneClient","React","Component","constructor","arguments","state","micOn","connected","_initializeState","setState","_stateChange","selected","currentProgramName","currentConfig","remoteChange","console","log","componentDidMount","on","bind","createHistogramCanvas","setupMicrophone","self","averageVolume","averageRelativeVolume","maxVolume","singletonAudioStream","createAnalyzer","onSuccess","stream","onError","err","alert","toString","audioops","navigator","getUserMedia","video","audio","webkitGetUserMedia","getAverageVolume","array","from","to","values","length","i","createAudioMeter","audioContext","processor","createScriptProcessor","onaudioprocess","volumeAudioProcess","volume","connect","destination","shutdown","disconnect","lastVolumes","event","buf","inputBuffer","getChannelData","bufLength","sum","x","energy","Math","sqrt","push","interval","processRawInterval","setTimeout","computeVolume","_","reduce","memo","num","emit","round","plotEnergyHistogram","max","min","singletonAudioContext","webkitAudioContext","AudioContext","mediaStreamSource","createMediaStreamSource","lastTime","Date","processInterval","computeSoundStats","byteFrequencyData","Uint8Array","analyser","frequencyBinCount","getByteFrequencyData","audioProcessorNode","c","document","getElementById","canvasCtx","getContext","clearRect","canvas","width","height","frame","componentWillUnmount","componentDidUpdate","oldProps","oldState","func","handleProgramClick","key","ev","preventDefault","setCurrentProgram","histogram","h","fillStyle","fillRect","imageData","getImageData","putImageData","font","fillText","turnOn","enable","turnOff","disable","render","buttonAction","e"],"mappings":"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","file":"microphoneClient.js","sourcesContent":["if (!window.socket) {\r\n  window.socket = io();\r\n}\r\n\r\n// Used to prevent android from locking\r\nvar noSleep = new NoSleep();\r\n\r\nclass MicrophoneClient extends React.Component {\r\n  constructor() {\r\n    super(...arguments)\r\n\r\n    this.state = {\r\n      micOn: true,\r\n      connected: false,\r\n    }\r\n  }\r\n\r\n  _initializeState(state) {\r\n    this.setState({\r\n      connected: true,\r\n    })\r\n  }\r\n\r\n  _stateChange(state) {\r\n    this.setState({\r\n      selected: state.currentProgramName,\r\n      currentConfig: state.currentConfig,\r\n      remoteChange: true\r\n    })\r\n    console.log(state)\r\n  }\r\n\r\n  componentDidMount() {\r\n    socket.on('micClientReady', this._initializeState.bind(this));\r\n\r\n    this.createHistogramCanvas()\r\n    this.setupMicrophone()\r\n    // socket.on('stateChange', this._stateChange.bind(this));\r\n  }\r\n\r\n  setupMicrophone(){\r\n    let self = this;\r\n\r\n    this.averageVolume = 0;\r\n    this.averageRelativeVolume = 0;\r\n    this.maxVolume = 0;\r\n\r\n    if(window.singletonAudioStream) {\r\n      createAnalyzer(window.singletonAudioStream)\r\n    } else {\r\n      function onSuccess(stream) {\r\n        window.singletonAudioStream = stream;\r\n        createAnalyzer(window.singletonAudioStream);\r\n      }\r\n\r\n      function onError(err) {\r\n        alert('Error' + err.toString());\r\n      }\r\n\r\n      let audioops = {\r\n        \"mandatory\": {\r\n          \"googEchoCancellation\": \"false\",\r\n          \"googAutoGainControl\": \"false\",\r\n          \"googNoiseSuppression\": \"false\",\r\n          \"googHighpassFilter\": \"false\"\r\n        },\r\n        \"optional\": []\r\n      };\r\n\r\n      if (navigator.getUserMedia) {\r\n        navigator.getUserMedia({\r\n          video: false,\r\n          audio: audioops\r\n        }, onSuccess, onError);\r\n      } else if (navigator.webkitGetUserMedia) {\r\n        navigator.webkitGetUserMedia({video: false, audio: true}, onSuccess, onError);\r\n      }\r\n    }\r\n\r\n    function getAverageVolume(array, from=0, to=null) {\r\n      let values = 0;\r\n      to = to || array.length;\r\n      // get all the frequency amplitudes\r\n      for (var i = from; i < to; i++) {\r\n        values += array[i] //*array[i];\r\n      }\r\n      return (values / (array.length * (to - from)));\r\n    }\r\n\r\n    function createAudioMeter(audioContext) {\r\n      var processor = audioContext.createScriptProcessor(512);\r\n      processor.onaudioprocess = volumeAudioProcess;\r\n      processor.volume = 0;\r\n\r\n      // this will have no effect, since we don't copy the input to the output,\r\n      // but works around a current Chrome bug.\r\n      processor.connect(audioContext.destination);\r\n\r\n      processor.shutdown =\r\n        function(){\r\n          this.disconnect();\r\n          this.onaudioprocess = null;\r\n        };\r\n\r\n      return processor;\r\n    }\r\n\r\n    var lastVolumes = [];\r\n    function volumeAudioProcess( event ) {\r\n      var buf = event.inputBuffer.getChannelData(0);\r\n      var bufLength = buf.length;\r\n      var sum = 0;\r\n      var x;\r\n\r\n      // Do a root-mean-square on the samples: sum up the squares...\r\n      for (var i=0; i<bufLength; i++) {\r\n        x = buf[i];\r\n        sum += x * x;\r\n      }\r\n\r\n      // ... then take the square root of the sum.\r\n      var energy =  Math.sqrt(sum / bufLength);\r\n\r\n      // Now smooth this out with the averaging factor applied\r\n      // to the previous sample - take the max here because we\r\n      // want \"fast attack, slow release.\"\r\n      lastVolumes.push(energy);\r\n\r\n      /*\r\n      self.averageVolume = energy\r\n      // self.bassesAverageVolume = getAverageVolume(array, 32);\r\n      self.maxVolume = Math.max(self.maxVolume, self.averageVolume);\r\n      self.averageRelativeVolume = Math.min(1, self.averageVolume / (self.maxVolume || 1))\r\n\r\n      // Plot\r\n      self.plotEnergyHistogram(self);\r\n      */\r\n    }\r\n\r\n    const interval = 100;\r\n    self.processRawInterval = setTimeout(function computeVolume(){\r\n      if(self.state.micOn && socket.connected && lastVolumes.length) {\r\n        // calculate average\r\n        self.averageVolume = _.reduce(lastVolumes, function(memo, num){ return memo + num; }, 0)/lastVolumes.length;\r\n        lastVolumes = [];\r\n\r\n        // Send integer sound value to reduce message byte size\r\n        socket.emit('SV', Math.round(self.averageVolume*10000))\r\n\r\n        // Plot\r\n        self.plotEnergyHistogram(self);\r\n\r\n        // self.bassesAverageVolume = getAverageVolume(array, 32);\r\n        self.maxVolume = Math.max(self.maxVolume, self.averageVolume);\r\n        self.averageRelativeVolume = Math.min(1, self.averageVolume / (self.maxVolume || 1))\r\n      }\r\n      self.processRawInterval = setTimeout(computeVolume, interval);\r\n    }, interval);\r\n\r\n\r\n    function createAnalyzer(stream) {\r\n      self.stream = stream;\r\n\r\n      if(!window.singletonAudioContext){\r\n        console.log(\"Creating singleton audio context\");\r\n        window.singletonAudioContext = window.webkitAudioContext ? new webkitAudioContext() : new AudioContext();\r\n      }\r\n\r\n      self.audioContext = window.singletonAudioContext;\r\n      self.mediaStreamSource = self.audioContext.createMediaStreamSource(stream);\r\n\r\n      self.mediaStreamSource.connect(createAudioMeter(self.audioContext));\r\n      return;\r\n      /*\r\n      self.analyser = self.audioContext.createAnalyser();\r\n      self.analyser.smoothingTimeConstant = 0.0;\r\n      self.analyser.fftSize = 512;\r\n\r\n      self.audioProcessorNode = self.audioContext.createScriptProcessor(self.analyser.frequencyBinCount, 1, 1);\r\n      */\r\n\r\n      let lastTime = new Date();\r\n      //self.audioProcessorNode.onaudioprocess = function(e) {\r\n      self.processInterval = setTimeout(function computeSoundStats(){\r\n        if(self.state.micOn && socket.connected) {\r\n          //var sample = e.inputBuffer.getChannelData(0);\r\n\r\n          // get the average, bincount is fftsize / 2\r\n          var byteFrequencyData = new Uint8Array(self.analyser.frequencyBinCount);\r\n          self.analyser.getByteFrequencyData(byteFrequencyData);\r\n\r\n          // calculate average\r\n          self.averageVolume = getAverageVolume(byteFrequencyData, 0, null);\r\n\r\n          // Send integer sound value to reduce message byte size\r\n          socket.emit('SV', Math.round(self.averageVolume*10000))\r\n\r\n          // Plot\r\n          self.plotEnergyHistogram(self);\r\n\r\n          // self.bassesAverageVolume = getAverageVolume(array, 32);\r\n          self.maxVolume = Math.max(self.maxVolume, self.averageVolume);\r\n          self.averageRelativeVolume = Math.min(1, self.averageVolume / (self.maxVolume || 1))\r\n        }\r\n        // console.log(\"Last audio: \" + (new Date() - lastTime) + \"ms \"+self.averageVolume)\r\n        self.processInterval = setTimeout(computeSoundStats, 25);\r\n        lastTime = new Date();\r\n\r\n      }, 25);\r\n\r\n      // stream -> mediaSource -> analyser -> javascriptNode -> destination\r\n      self.mediaStreamSource.connect(self.analyser);\r\n      self.analyser.connect(self.audioProcessorNode);\r\n      self.audioProcessorNode.connect(self.audioContext.destination);\r\n    }\r\n  }\r\n\r\n  createHistogramCanvas() {\r\n    let c = document.getElementById(\"music\");\r\n    this.canvasCtx = c.getContext(\"2d\");\r\n    this.canvasCtx.clearRect(0, 0, this.canvasCtx.canvas.width, this.canvasCtx.canvas.height);\r\n    this.frame = 0;\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    //this.stopCurrent()\r\n  }\r\n\r\n  componentDidUpdate(oldProps, oldState) {\r\n    if (oldState.func !== this.state.func) {\r\n      //this.startCurrent()\r\n    }\r\n  }\r\n\r\n  handleProgramClick(key, ev) {\r\n    ev.preventDefault()\r\n    this.setCurrentProgram(key)\r\n  }\r\n\r\n  plotEnergyHistogram() {\r\n    let histogram = document.getElementById(\"music\");\r\n\r\n    let h = Math.round(this.averageVolume / (this.maxVolume || 1) * 100);\r\n    this.canvasCtx.fillStyle = `hsl(${Math.round((1 - h/100 % 1 + 0)*255)}, ${50}%, ${50}%)`;\r\n    // this.canvasCtx.fillStyle = `#ff5500`;\r\n    this.canvasCtx.fillRect(300, 100 - h, 2, h);\r\n    // Move all left\r\n    let imageData = this.canvasCtx.getImageData(2, 0, this.canvasCtx.canvas.width - 1, this.canvasCtx.canvas.height);\r\n    this.canvasCtx.putImageData(imageData, 0, 0);\r\n    // now clear the right-most pixels:\r\n    this.canvasCtx.clearRect(this.canvasCtx.canvas.width - 2, 0, 2, this.canvasCtx.canvas.height);\r\n\r\n    this.canvasCtx.fillStyle = 'white'\r\n    this.canvasCtx.font = \"12px monospace\";\r\n    this.canvasCtx.clearRect(this.canvasCtx.canvas.width - 100, 0, 100, this.canvasCtx.canvas.height);\r\n    this.canvasCtx.fillText(`MAX Vol: ${Math.round(this.maxVolume*100)}`, 310, 15);\r\n    this.canvasCtx.fillText(`    Vol: ${Math.round(this.averageVolume*100)}`, 310, 30);\r\n    this.canvasCtx.fillText(`REL Vol: ${Math.round(this.averageRelativeVolume*100)}`, 310, 45);\r\n  }\r\n\r\n  turnOn(){\r\n    this.setState({micOn: true});\r\n    noSleep.enable();\r\n    alert(\"No se duerme\")\r\n  }\r\n\r\n  turnOff(){\r\n    this.setState({micOn: false})\r\n    this.maxVolume = 0.00001\r\n    noSleep.disable();\r\n  }\r\n\r\n  render() {\r\n    let buttonAction = null;\r\n\r\n    if (this.state.micOn) {\r\n      buttonAction = <a href=\"#\" onClick={e => this.turnOff()}>TURN MIC OFF</a>\r\n    } else {\r\n      buttonAction = <a href=\"#\" onClick={e => this.turnOn()}>TURN MIC ON</a>\r\n    }\r\n    return <div className=\"mic-client\">\r\n      <div className=\"buttons\">MIC CLIENT &nbsp; &nbsp; {this.state.connected} {buttonAction}\r\n      </div>\r\n      <canvas id=\"music\" width=\"400\" height=\"100\">a</canvas>\r\n    </div>\r\n  }\r\n}"]}