{"version":3,"sources":["microphoneViewer.jsx"],"names":[],"mappings":"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","file":"microphoneViewer.js","sourcesContent":["if (!window.socket) {\n  window.socket = io();\n}\n\nclass MicrophoneViewer extends React.Component {\n  constructor() {\n    super(...arguments)\n\n    this.state = {\n      micOn: true,\n      connected: false,\n    }\n  }\n\n  _initializeState(state) {\n    this.setState({\n      connected: true,\n    })\n  }\n\n  _stateChange(state) {\n    this.setState({\n      selected: state.currentProgramName,\n      currentConfig: state.currentConfig,\n      remoteChange: true\n    })\n    console.log(state)\n  }\n\n  componentDidMount() {\n    socket.on('micViewerReady', this._initializeState.bind(this));\n\n    socket.on('micSample', samples => {\n      // _.each(samples, ({level, max}) => this.plotEnergyHistogram(level, max))\n      _.each(samples, sample => this.plotPerBandHistogram(sample))\n    });\n\n    this.createHistogramCanvas()\n  }\n\n  createHistogramCanvas() {\n    let c = document.getElementById(\"music\");\n    this.canvasCtx = c.getContext(\"2d\");\n    this.canvasCtx.clearRect(0, 0, this.canvasCtx.canvas.width, this.canvasCtx.canvas.height);\n    this.frame = 0;\n  }\n\n  componentWillUnmount() {\n    //this.stopCurrent()\n  }\n\n  componentDidUpdate(oldProps, oldState) {\n    if (oldState.func !== this.state.func) {\n      //this.startCurrent()\n    }\n  }\n\n  handleProgramClick(key, ev) {\n    ev.preventDefault()\n    this.setCurrentProgram(key)\n  }\n\n  plotEnergyHistogram(level, max) {\n    let histogram = document.getElementById(\"music\");\n\n    let h = Math.round(level * 50);\n    this.canvasCtx.fillStyle = `hsl(${Math.round((1 - h/50 % 1 + 0)*255)}, ${50}%, ${50}%)`;\n    // this.canvasCtx.fillStyle = `#ff5500`;\n    this.canvasCtx.fillRect(300, 50 - h, 2, h);\n    // Move all left\n    let imageData = this.canvasCtx.getImageData(2, 0, this.canvasCtx.canvas.width - 1, this.canvasCtx.canvas.height);\n    this.canvasCtx.putImageData(imageData, 0, 0);\n    // now clear the right-most pixels:\n    this.canvasCtx.clearRect(this.canvasCtx.canvas.width - 2, 0, 2, this.canvasCtx.canvas.height);\n\n    this.canvasCtx.fillStyle = 'white'\n    this.canvasCtx.font = \"12px monospace\";\n    this.canvasCtx.clearRect(this.canvasCtx.canvas.width - 100, 0, 100, this.canvasCtx.canvas.height);\n    this.canvasCtx.fillText(`MAX Vol: ${Math.round(max*100)}`, 310, 15);\n    // this.canvasCtx.fillText(`    Vol: ${Math.round(this.averageVolume*100)}`, 310, 30);\n    this.canvasCtx.fillText(`REL Vol: ${Math.round(level*100)}`, 310, 45);\n  }\n\n  plotPerBandHistogram({bass, mid, high, onsetbass, onsetmid, onsethigh}) {\n    let HEIGHT = this.canvasCtx.canvas.height / 3;\n    let histogram = document.getElementById(\"music\");\n    let r = Math.round(bass)*2;\n    let g = Math.round(mid)*2;\n    let b = Math.round(high)*0.5;\n    let max = 0;\n    let level = Math.min(1, (r+g+b)/(3*255));\n\n    let h = Math.round(level * HEIGHT);\n\n    // let w = 6;\n    // this.canvasCtx.fillStyle = `rgb(${r}, ${g}, ${b})`;\n    // this.canvasCtx.fillRect(300, HEIGHT - h, w, h);\n    //\n    let MIN = 30;\n    let w = 1;\n    this.canvasCtx.globalCompositeOperation = \"screen\";\n    this.canvasCtx.fillStyle = `rgba(${Math.max(MIN,r)}, ${0}, ${0})`;\n    h = Math.round((r/255) * HEIGHT);\n    this.canvasCtx.fillRect(this.canvasCtx.canvas.width - 100, HEIGHT - h, w, h);\n    if(onsetbass) {\n      this.canvasCtx.fillStyle = `#fff`;\n      this.canvasCtx.fillRect(this.canvasCtx.canvas.width - 100, HEIGHT, w, 5);\n    }\n\n    h = Math.round((g/255) * HEIGHT);\n    this.canvasCtx.fillStyle = `rgba(${0}, ${Math.max(MIN,g)}, ${0})`;\n    this.canvasCtx.fillRect(this.canvasCtx.canvas.width - 100, HEIGHT - h +HEIGHT, w, h);\n    if(onsetmid) {\n      this.canvasCtx.fillStyle = `#fff`;\n      this.canvasCtx.fillRect(this.canvasCtx.canvas.width - 100, HEIGHT + HEIGHT, w, 5);\n    }\n\n    h = Math.round((b/255) * HEIGHT);\n    this.canvasCtx.fillStyle = `rgba(${0}, ${0}, ${Math.max(MIN,b)})`;\n    this.canvasCtx.fillRect(this.canvasCtx.canvas.width - 100, HEIGHT - h+HEIGHT*2, w, h);\n    if(onsethigh) {\n      this.canvasCtx.fillStyle = `#fff`;\n      this.canvasCtx.fillRect(this.canvasCtx.canvas.width - 100, HEIGHT + HEIGHT*2-5, w, 5);\n    }\n    //\n    this.canvasCtx.globalCompositeOperation = \"source-over\";\n\n    // this.canvasCtx.fillStyle = `#ff5500`;\n    // Move all left\n    let imageData = this.canvasCtx.getImageData(w, 0, this.canvasCtx.canvas.width - 1, this.canvasCtx.canvas.height);\n    this.canvasCtx.putImageData(imageData, 0, 0);\n    // now clear the right-most pixels:\n    this.canvasCtx.clearRect(this.canvasCtx.canvas.width - w, 0, w, this.canvasCtx.canvas.height);\n\n    this.canvasCtx.fillStyle = 'white'\n    this.canvasCtx.font = \"12px monospace\";\n    this.canvasCtx.clearRect(this.canvasCtx.canvas.width - 100, 0, 100, this.canvasCtx.canvas.height);\n    this.canvasCtx.fillText(`MAX Vol: ${Math.round(max*100)}`, this.canvasCtx.canvas.width - 90, 15);\n    // this.canvasCtx.fillText(`    Vol: ${Math.round(this.averageVolume*100)}`, 310, 30);\n    this.canvasCtx.fillText(`REL Vol: ${Math.round(level*100)}`, this.canvasCtx.canvas.width - 90, 45);\n  }\n\n  turnOn(){\n    this.setState({micOn: true});\n    alert(\"No se duerme\")\n  }\n\n  turnOff(){\n    this.setState({micOn: false})\n  }\n\n  render() {\n    return <div className=\"mic-client\">\n      <canvas id=\"music\" width=\"800\" height=\"300\">a</canvas>\n    </div>\n  }\n}"]}