{"version":3,"sources":["canvas.jsx"],"names":["hexRegex","hexToRgb","hex","result","exec","parseInt","LightsCanvas","React","Component","constructor","arguments","getColor","props","geometryX","geometryY","state","renderingEnabled","lastFrameTime","performance","now","lastFPS","frameCount","lastCall","Date","getTime","componentWillReceiveProps","newProps","componentDidMount","getNextFrame","newCall","drawCanvas","componentWillUnmount","index","__changeSelection","setState","render","bind","width","height","drawStartTime","leds","length","ctx","refs","canvas","getContext","globalCompositeOperation","fillStyle","fillRect","X","Y","i","color","undefined","r","g","b","x","y","power","lightRadius","m","or","og","ob","beginPath","arc","Math","PI","fill","drawMilliseconds","timeSinceLastFPS","font","fillText","toFixed"],"mappings":"AAAA;;;AAGA,MAAMA,WAAW,2CAAjB;;AAEA;;;;AAIA,SAASC,QAAT,CAAkBC,GAAlB,EAAuB;AACrB,MAAIC,SAASH,SAASI,IAAT,CAAcF,GAAd,CAAb;AACA,SAAOC,SAAS,CAACE,SAASF,OAAO,CAAP,CAAT,EAAoB,EAApB,CAAD,EAA0BE,SAASF,OAAO,CAAP,CAAT,EAAoB,EAApB,CAA1B,EAAmDE,SAASF,OAAO,CAAP,CAAT,EAAoB,EAApB,CAAnD,CAAT,GAAuF,IAA9F;AACD;;AAED,MAAMG,YAAN,SAA2BC,MAAMC,SAAjC,CAA2C;AACzCC,gBAAc;AACZ,UAAM,GAAGC,SAAT;;AAEA,SAAKC,QAAL,GAAgB,KAAKC,KAAL,CAAWD,QAA3B;AACA,SAAKE,SAAL,GAAiB,KAAKD,KAAL,CAAWC,SAA5B;AACA,SAAKC,SAAL,GAAiB,KAAKF,KAAL,CAAWE,SAA5B;;AAEA,SAAKC,KAAL,GAAa;AACXC,wBAAkB;AADP,KAAb;;AAIA,SAAKC,aAAL,GAAqBC,YAAYC,GAAZ,EAArB;AACA,SAAKC,OAAL,GAAe,CAAf;AACA,SAAKC,UAAL,GAAkB,CAAlB;;AAEA,SAAKC,QAAL,GAAgB,IAAIC,IAAJ,GAAWC,OAAX,EAAhB;AACD;;AAEDC,4BAA0BC,QAA1B,EAAoC;AAClC,SAAKf,QAAL,GAAgBe,SAASf,QAAzB;AACA,SAAKE,SAAL,GAAiBa,SAASb,SAA1B;AACA,SAAKC,SAAL,GAAiBY,SAASZ,SAA1B;AACD;;AAEDa,sBAAoB;AAClB,SAAKC,YAAL;AACD;;AAEDA,iBAAe;AACb,UAAMC,UAAU,IAAIN,IAAJ,GAAWC,OAAX,EAAhB;AACA;AACA;AACA;AACA;AACA,SAAKM,UAAL;AACA;AACA,SAAKR,QAAL,GAAgBO,OAAhB;AACD;;AAEDE,yBAAuB;AACrB;AACD;;AAEDpB,WAASqB,KAAT,EAAgB;AACd,WAAO,KAAKrB,QAAL,CAAcqB,KAAd,CAAP;AACD;;AAEDC,sBAAmB;AACjB,SAAKC,QAAL,CAAc,EAAClB,kBAAkB,CAAC,KAAKD,KAAL,CAAWC,gBAA/B,EAAd;AACD;;AAEDmB,WAAS;AACP,WAAO;AAAA;AAAA;AACL;AAAA;AAAA;AACE,uCAAO,MAAK,UAAZ,EAAuB,WAAS,cAAhC,EAAgD,SAAS,KAAKpB,KAAL,CAAWC,gBAApE,EAAsF,UAAU,KAAKiB,iBAAL,CAAuBG,IAAvB,CAA4B,IAA5B,CAAhG,GADF;AACuI;AAAA;AAAA;AAAA;AAAA;AADvI,OADK;AAIH,sCAAQ,KAAI,QAAZ,EAAqB,OAAO,KAAKxB,KAAL,CAAWyB,KAAvC,EAA8C,QAAQ,KAAKzB,KAAL,CAAW0B,MAAjE;AAJG,KAAP;AAMD;;AAEDR,eAAa;AACX,UAAMS,gBAAgBrB,YAAYC,GAAZ,EAAtB;;AAEA,UAAMqB,OAAO,KAAK3B,SAAL,CAAe4B,MAA5B;AACA,UAAMC,MAAM,KAAKC,IAAL,CAAUC,MAAV,CAAiBC,UAAjB,CAA4B,IAA5B,CAAZ;;AAEAH,QAAII,wBAAJ,GAA+B,aAA/B;AACAJ,QAAIK,SAAJ,GAAgB,OAAhB;AACAL,QAAIM,QAAJ,CAAa,CAAb,EAAgB,CAAhB,EAAmB,KAAKpC,KAAL,CAAWyB,KAA9B,EAAqC,KAAKzB,KAAL,CAAW0B,MAAhD;;AAEAI,QAAII,wBAAJ,GAA+B,SAA/B;;AAEA,QAAG,KAAK/B,KAAL,CAAWC,gBAAd,EAAgC;AAC9B,YAAMiC,IAAI,KAAKpC,SAAf;AACA,YAAMqC,IAAI,KAAKpC,SAAf;;AAEA,WAAK,IAAIqC,IAAI,CAAb,EAAgBA,IAAIX,IAApB,EAA0BW,GAA1B,EAA+B;AAC7B,cAAMC,QAAQ,KAAKzC,QAAL,CAAcwC,CAAd,CAAd;AACA,YAAIC,UAAUC,SAAd,EAAyB;AACvB;AACD;AACD,cAAM,CAACC,CAAD,EAAIC,CAAJ,EAAOC,CAAP,IAAYvD,SAASmD,KAAT,CAAlB;AACA,cAAMK,IAAIR,EAAEE,CAAF,CAAV;AACA,cAAMO,IAAIR,EAAEC,CAAF,CAAV;;AAEA,YAAIQ,QAASL,IAAIC,CAAJ,GAAQC,CAArB;AACA,YAAIG,QAAQ,CAAZ,EAAeA,QAAQ,CAAR;;AAEf,YAAIC,cAAc,CAAC,KAAK,CAACN,IAAIC,CAAJ,GAAQC,CAAT,KAAe,MAAM,CAArB,IAA0B,EAAhC,IAAsC,CAAxD;;AAEA,YAAIK,IAAI,CAAR;AACA,YAAGF,QAAQ,GAAX,EAAe;AACbE,cAAI,CAAJ;AACD,SAFD,MAEO,IAAIF,QAAQ,GAAZ,EAAgB;AACrBE,cAAI,CAAJ;AACD,SAFM,MAEA,IAAIF,QAAQ,EAAZ,EAAe;AACpBE,cAAI,EAAJ;AACD;AACD,YAAI,CAACC,EAAD,EAAKC,EAAL,EAASC,EAAT,IAAe,CAACV,IAAIO,CAAL,EAAQN,IAAGM,CAAX,EAAcL,IAAIK,CAAlB,CAAnB;AACA,YAAIC,KAAK,GAAT,EAAcA,KAAK,GAAL;AACd,YAAIC,KAAK,GAAT,EAAcA,KAAK,GAAL;AACd,YAAIC,KAAK,GAAT,EAAcA,KAAK,GAAL;;AAEdtB,YAAIuB,SAAJ;;AAEFL,sBAAcA,cAAa,CAA3B;AACAlB,YAAIK,SAAJ,GAAiB,QAAOe,EAAG,KAAIC,EAAG,KAAIC,EAAG,MAAzC;;AAEE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGAtB,YAAIwB,GAAJ,CAAQT,CAAR,EAAWC,CAAX,EAAcE,WAAd,EAA2BO,KAAKC,EAAL,GAAU,CAArC,EAAwC,KAAxC;AACA1B,YAAI2B,IAAJ;AACD;AACF;;AAED,SAAKhD,UAAL;;AAEA,QAAIiD,mBAAmBpD,YAAYC,GAAZ,KAAoBoB,aAA3C;AACA,QAAIgC,mBAAmBrD,YAAYC,GAAZ,KAAoB,KAAKF,aAAhD;AACA,QAAGsD,mBAAmB,GAAtB,EAA0B;AACxB,WAAKnD,OAAL,GAAe,OAAK,KAAKC,UAAV,GAAqBkD,gBAApC;AACA,WAAKlD,UAAL,GAAkB,CAAlB;AACA,WAAKJ,aAAL,GAAqBC,YAAYC,GAAZ,EAArB;AACD;;AAEDuB,QAAIK,SAAJ,GAAgB,OAAhB;AACAL,QAAI8B,IAAJ,GAAW,iBAAX;;AAIA;AACA9B,QAAI+B,QAAJ,CAAc,QAAO,KAAKrD,OAAL,CAAasD,OAAb,CAAqB,CAArB,CAAwB,EAA7C,EAAgD,EAAhD,EAAoD,EAApD;AAED;AA9IwC","file":"canvas.js","sourcesContent":["/**\r\n * We need a regex that matches stuff like #FF00DD and groups the three 0-255 values\r\n */\r\nconst hexRegex = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i\r\n\r\n/**\r\n * Returns an array of three elements with the 0-255 values for R, G, B\r\n */\r\n\r\nfunction hexToRgb(hex) {\r\n  var result = hexRegex.exec(hex);\r\n  return result ? [parseInt(result[1], 16), parseInt(result[2], 16), parseInt(result[3], 16)] : null\r\n}\r\n\r\nclass LightsCanvas extends React.Component {\r\n  constructor() {\r\n    super(...arguments)\r\n\r\n    this.getColor = this.props.getColor\r\n    this.geometryX = this.props.geometryX\r\n    this.geometryY = this.props.geometryY\r\n\r\n    this.state = {\r\n      renderingEnabled: true\r\n    }\r\n\r\n    this.lastFrameTime = performance.now();\r\n    this.lastFPS = 0;\r\n    this.frameCount = 0;\r\n\r\n    this.lastCall = new Date().getTime()\r\n  }\r\n\r\n  componentWillReceiveProps(newProps) {\r\n    this.getColor = newProps.getColor\r\n    this.geometryX = newProps.geometryX\r\n    this.geometryY = newProps.geometryY\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getNextFrame()\r\n  }\r\n\r\n  getNextFrame() {\r\n    const newCall = new Date().getTime()\r\n    // console.log('FPS:', 1000/(newCall - this.lastCall))\r\n    // const request = window.requestAnimationFrame(\r\n    //   this.getNextFrame.bind(this), ReactDOM.findDOMNode(this.refs.canvas)\r\n    // )\r\n    this.drawCanvas()\r\n    // this.setState({ request })\r\n    this.lastCall = newCall\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    // window.cancelAnimationFrame(this.state.request)\r\n  }\r\n\r\n  getColor(index) {\r\n    return this.getColor(index)\r\n  }\r\n\r\n  __changeSelection(){\r\n    this.setState({renderingEnabled: !this.state.renderingEnabled});\r\n  }\r\n\r\n  render() {\r\n    return <div>\r\n      <div>\r\n        <input type=\"checkbox\" data-id={'renderToggle'} checked={this.state.renderingEnabled} onChange={this.__changeSelection.bind(this)} /><label>Simular</label>\r\n      </div>\r\n        <canvas ref=\"canvas\" width={this.props.width} height={this.props.height} />\r\n    </div>\r\n  }\r\n\r\n  drawCanvas() {\r\n    const drawStartTime = performance.now();\r\n\r\n    const leds = this.geometryX.length\r\n    const ctx = this.refs.canvas.getContext('2d')\r\n\r\n    ctx.globalCompositeOperation = 'source-over'\r\n    ctx.fillStyle = 'black'\r\n    ctx.fillRect(0, 0, this.props.width, this.props.height)\r\n\r\n    ctx.globalCompositeOperation = 'lighter'\r\n\r\n    if(this.state.renderingEnabled) {\r\n      const X = this.geometryX\r\n      const Y = this.geometryY\r\n\r\n      for (let i = 0; i < leds; i++) {\r\n        const color = this.getColor(i)\r\n        if (color === undefined) {\r\n          return\r\n        }\r\n        const [r, g, b] = hexToRgb(color)\r\n        const x = X[i]\r\n        const y = Y[i]\r\n\r\n        let power = (r + g + b)\r\n        if (power < 0) power = 0\r\n\r\n        let lightRadius = (10 + (r + g + b) / (255 * 3) * 80) * 1\r\n\r\n        let m = 2;\r\n        if(power < 200){\r\n          m = 4;\r\n        } else if (power < 100){\r\n          m = 8;\r\n        } else if (power < 50){\r\n          m = 16;\r\n        }\r\n        let [or, og, ob] = [r * m, g *m, b * m]\r\n        if (or > 255) or = 255\r\n        if (og > 255) og = 255\r\n        if (ob > 255) ob = 255\r\n\r\n        ctx.beginPath()\r\n\r\n      lightRadius = lightRadius /6;\r\n      ctx.fillStyle = `rgba(${or}, ${og}, ${ob}, 1)`;\r\n\r\n        // let gradient = ctx.createRadialGradient(x, y, 0, x, y, lightRadius)\r\n        // gradient.addColorStop(0,     `rgba(${or}, ${og}, ${ob}, 1)`)\r\n        // // gradient.addColorStop(0.065, `rgba(${or}, ${og}, ${ob}, 1)`)\r\n        // gradient.addColorStop(0.25, `rgba(${r}, ${g}, ${b}, 1)`)\r\n        // // gradient.addColorStop(0.25,  `rgba(${r}, ${g}, ${b}, 0.25)`)\r\n        // // gradient.addColorStop(0.5,   `rgba(${r}, ${g}, ${b}, 0.12)`)\r\n        // gradient.addColorStop(1,     `rgba(${0}, ${0}, ${0}, 1)`)\r\n        // ctx.fillStyle = gradient\r\n\r\n\r\n        ctx.arc(x, y, lightRadius, Math.PI * 2, false)\r\n        ctx.fill()\r\n      }\r\n    }\r\n\r\n    this.frameCount++;\r\n\r\n    let drawMilliseconds = performance.now() - drawStartTime;\r\n    let timeSinceLastFPS = performance.now() - this.lastFrameTime;\r\n    if(timeSinceLastFPS > 100){\r\n      this.lastFPS = 1000*this.frameCount/timeSinceLastFPS;\r\n      this.frameCount = 0;\r\n      this.lastFrameTime = performance.now();\r\n    }\r\n\r\n    ctx.fillStyle = 'white'\r\n    ctx.font = \"12px sans-serif\";\r\n\r\n\r\n\r\n    // ctx.fillText(`Sim overhead FPS: ${Math.floor(1000/drawMilliseconds)}`, 10, 40);\r\n    ctx.fillText(`FPS: ${this.lastFPS.toFixed(1)}`, 10, 20);\r\n\r\n  }\r\n}\r\n"]}