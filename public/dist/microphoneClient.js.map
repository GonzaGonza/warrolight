{"version":3,"sources":["../microphoneClient.jsx"],"names":[],"mappings":"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","file":"microphoneClient.js","sourcesContent":["if (!window.socket) {\n  window.socket = io();\n}\n\n// Used to prevent android from locking\nvar noSleep = new NoSleep();\n\nclass MicrophoneClient extends React.Component {\n  constructor() {\n    super(...arguments)\n\n    this.state = {\n      micOn: true,\n      connected: false,\n    }\n  }\n\n  _initializeState(state) {\n    this.setState({\n      connected: true,\n    })\n  }\n\n  _stateChange(state) {\n    this.setState({\n      selected: state.currentProgramName,\n      currentConfig: state.currentConfig,\n      remoteChange: true\n    })\n    console.log(state)\n  }\n\n  componentDidMount() {\n    socket.on('micClientReady', this._initializeState.bind(this));\n\n    this.createHistogramCanvas()\n    this.setupMicrophone()\n    // socket.on('stateChange', this._stateChange.bind(this));\n  }\n\n  setupMicrophone(){\n    let self = this;\n\n    this.averageVolume = 0;\n    this.averageRelativeVolume = 0;\n    this.maxVolume = 0;\n\n    if(window.singletonAudioStream) {\n      createAnalyzer(window.singletonAudioStream)\n    } else {\n      function onSuccess(stream) {\n        window.singletonAudioStream = stream;\n        createAnalyzer(window.singletonAudioStream);\n      }\n\n      function onError(err) {\n        alert('Error' + err.toString());\n      }\n\n      if (navigator.getUserMedia) {\n        navigator.getUserMedia({video: false, audio: true}, onSuccess, onError);\n      } else if (navigator.webkitGetUserMedia) {\n        navigator.webkitGetUserMedia({video: false, audio: true}, onSuccess, onError);\n      }\n    }\n\n    function getAverageVolume(array, from=0, to=null) {\n      let values = 0;\n      to = to || array.length;\n      // get all the frequency amplitudes\n      for (var i = from; i < to; i++) {\n        values += array[i];\n      }\n      return values / (array.length * (to - from));\n    }\n\n    function createAnalyzer(stream) {\n      self.stream = stream;\n\n      if(!window.singletonAudioContext){\n        console.log(\"Creating singleton audio context\");\n        window.singletonAudioContext = window.webkitAudioContext ? new webkitAudioContext() : new AudioContext();\n      }\n\n      self.audioContext = window.singletonAudioContext;\n      self.mediaStreamSource = self.audioContext.createMediaStreamSource(stream);\n\n      self.analyser = self.audioContext.createAnalyser();\n      self.analyser.smoothingTimeConstant = 0.0;\n      self.analyser.fftSize = 512;\n\n      self.audioProcessorNode = self.audioContext.createScriptProcessor(self.analyser.frequencyBinCount, 1, 1);\n\n      let lastTime = new Date();\n      //self.audioProcessorNode.onaudioprocess = function(e) {\n      self.processInterval = setTimeout(function computeSoundStats(){\n        if(self.state.micOn) {\n          //var sample = e.inputBuffer.getChannelData(0);\n\n          // get the average, bincount is fftsize / 2\n          var byteFrequencyData = new Uint8Array(self.analyser.frequencyBinCount);\n          self.analyser.getByteFrequencyData(byteFrequencyData);\n\n          // calculate average\n          self.averageVolume = getAverageVolume(byteFrequencyData, 0, 64);\n\n          if (self.state.micOn) {\n            socket.emit('soundValue', self.averageVolume)\n          }\n\n          // Plot\n          self.plotEnergyHistogram(self);\n\n          // self.bassesAverageVolume = getAverageVolume(array, 32);\n          self.maxVolume = Math.max(self.maxVolume, self.averageVolume);\n          self.averageRelativeVolume = self.averageVolume / (self.maxVolume || 1)\n        }\n        // console.log(\"Last audio: \" + (new Date() - lastTime) + \"ms \"+self.averageVolume)\n        self.processInterval = setTimeout(computeSoundStats, 2);\n        lastTime = new Date();\n\n      }, 2);\n\n      // stream -> mediaSource -> analyser -> javascriptNode -> destination\n      self.mediaStreamSource.connect(self.analyser);\n      self.analyser.connect(self.audioProcessorNode);\n      self.audioProcessorNode.connect(self.audioContext.destination);\n    }\n  }\n\n  createHistogramCanvas() {\n    let c = document.getElementById(\"music\");\n    this.canvasCtx = c.getContext(\"2d\");\n    this.canvasCtx.clearRect(0, 0, this.canvasCtx.canvas.width, this.canvasCtx.canvas.height);\n    this.frame = 0;\n  }\n\n  componentWillUnmount() {\n    //this.stopCurrent()\n  }\n\n  componentDidUpdate(oldProps, oldState) {\n    if (oldState.func !== this.state.func) {\n      //this.startCurrent()\n    }\n  }\n\n  handleProgramClick(key, ev) {\n    ev.preventDefault()\n    this.setCurrentProgram(key)\n  }\n\n  plotEnergyHistogram() {\n    let histogram = document.getElementById(\"music\");\n\n    let h = Math.round(this.averageVolume / (this.maxVolume || 1) * 100);\n    this.canvasCtx.fillStyle = `hsl(${Math.round((1 - h/100 % 1 + 0)*255)}, ${50}%, ${50}%)`;\n    // this.canvasCtx.fillStyle = `#ff5500`;\n    this.canvasCtx.fillRect(300, 100 - h, 2, h);\n    // Move all left\n    let imageData = this.canvasCtx.getImageData(2, 0, this.canvasCtx.canvas.width - 1, this.canvasCtx.canvas.height);\n    this.canvasCtx.putImageData(imageData, 0, 0);\n    // now clear the right-most pixels:\n    this.canvasCtx.clearRect(this.canvasCtx.canvas.width - 2, 0, 2, this.canvasCtx.canvas.height);\n\n    this.canvasCtx.fillStyle = 'white'\n    this.canvasCtx.font = \"12px monospace\";\n    this.canvasCtx.clearRect(this.canvasCtx.canvas.width - 100, 0, 100, this.canvasCtx.canvas.height);\n    this.canvasCtx.fillText(`MAX Vol: ${Math.round(this.maxVolume*100)}`, 310, 15);\n    this.canvasCtx.fillText(`    Vol: ${Math.round(this.averageVolume*100)}`, 310, 30);\n    this.canvasCtx.fillText(`REL Vol: ${Math.round(this.averageRelativeVolume*100)}`, 310, 45);\n  }\n\n  turnOn(){\n    this.setState({micOn: true});\n    noSleep.enable();\n    alert(\"No se duerme\")\n  }\n\n  turnOff(){\n    this.setState({micOn: false});\n    noSleep.disable();\n  }\n\n  render() {\n    let buttonAction = null;\n\n    if (this.state.micOn) {\n      buttonAction = <a href=\"#\" onClick={e => this.turnOff()}>TURN MIC OFF</a>\n    } else {\n      buttonAction = <a href=\"#\" onClick={e => this.turnOn()}>TURN MIC ON</a>\n    }\n    return <div className=\"mic-client\">\n      <div className=\"buttons\">MIC CLIENT &nbsp; &nbsp; {this.state.connected} {buttonAction}\n      </div>\n      <canvas id=\"music\" width=\"400\" height=\"100\">a</canvas>\n    </div>\n  }\n}"]}