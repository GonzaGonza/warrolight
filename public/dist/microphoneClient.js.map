{"version":3,"sources":["../microphoneClient.jsx"],"names":[],"mappings":"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","file":"microphoneClient.js","sourcesContent":["if (!window.socket) {\n  window.socket = io();\n}\n\n// Used to prevent android from locking\nvar noSleep = new NoSleep();\n\nclass MicrophoneClient extends React.Component {\n  constructor() {\n    super(...arguments)\n\n    this.state = {\n      micOn: true,\n      connected: false,\n    }\n  }\n\n  _initializeState(state) {\n    this.setState({\n      connected: true,\n    })\n  }\n\n  _stateChange(state) {\n    this.setState({\n      selected: state.currentProgramName,\n      currentConfig: state.currentConfig,\n      remoteChange: true\n    })\n    console.log(state)\n  }\n\n  componentDidMount() {\n    socket.on('micClientReady', this._initializeState.bind(this));\n\n    this.createHistogramCanvas()\n    this.setupMicrophone()\n    // socket.on('stateChange', this._stateChange.bind(this));\n  }\n\n  setupMicrophone(){\n    let self = this;\n\n    this.averageVolume = 0;\n    this.averageRelativeVolume = 0;\n    this.maxVolume = 0;\n\n    if(window.singletonAudioStream) {\n      createAnalyzer(window.singletonAudioStream)\n    } else {\n      function onSuccess(stream) {\n        window.singletonAudioStream = stream;\n        createAnalyzer(window.singletonAudioStream);\n      }\n\n      function onError(err) {\n        alert('Error' + err.toString());\n      }\n\n      let audioops = {\n        \"mandatory\": {\n          \"googEchoCancellation\": \"false\",\n          \"googAutoGainControl\": \"false\",\n          \"googNoiseSuppression\": \"false\",\n          \"googHighpassFilter\": \"false\"\n        },\n        \"optional\": []\n      };\n\n      if (navigator.getUserMedia) {\n        navigator.getUserMedia({\n          video: false,\n          audio: audioops\n        }, onSuccess, onError);\n      } else if (navigator.webkitGetUserMedia) {\n        navigator.webkitGetUserMedia({video: false, audio: true}, onSuccess, onError);\n      }\n    }\n\n    function getAverageVolume(array, from=0, to=null) {\n      let values = 0;\n      to = to || array.length;\n      // get all the frequency amplitudes\n      for (var i = from; i < to; i++) {\n        values += array[i] //*array[i];\n      }\n      return (values / (array.length * (to - from)));\n    }\n\n    function createAudioMeter(audioContext) {\n      var processor = audioContext.createScriptProcessor(512);\n      processor.onaudioprocess = volumeAudioProcess;\n      processor.volume = 0;\n\n      // this will have no effect, since we don't copy the input to the output,\n      // but works around a current Chrome bug.\n      processor.connect(audioContext.destination);\n\n      processor.shutdown =\n        function(){\n          this.disconnect();\n          this.onaudioprocess = null;\n        };\n\n      return processor;\n    }\n\n    var lastVolumes = [];\n    function volumeAudioProcess( event ) {\n      var buf = event.inputBuffer.getChannelData(0);\n      var bufLength = buf.length;\n      var sum = 0;\n      var x;\n\n      // Do a root-mean-square on the samples: sum up the squares...\n      for (var i=0; i<bufLength; i++) {\n        x = buf[i];\n        sum += x * x;\n      }\n\n      // ... then take the square root of the sum.\n      var energy =  Math.sqrt(sum / bufLength);\n\n      // Now smooth this out with the averaging factor applied\n      // to the previous sample - take the max here because we\n      // want \"fast attack, slow release.\"\n      lastVolumes.push(energy);\n\n      /*\n      self.averageVolume = energy\n      // self.bassesAverageVolume = getAverageVolume(array, 32);\n      self.maxVolume = Math.max(self.maxVolume, self.averageVolume);\n      self.averageRelativeVolume = Math.min(1, self.averageVolume / (self.maxVolume || 1))\n\n      // Plot\n      self.plotEnergyHistogram(self);\n      */\n    }\n\n    const interval = 100;\n    self.processRawInterval = setTimeout(function computeVolume(){\n      if(self.state.micOn && socket.connected && lastVolumes.length) {\n        // calculate average\n        self.averageVolume = _.reduce(lastVolumes, function(memo, num){ return memo + num; }, 0)/lastVolumes.length;\n        lastVolumes = [];\n\n        // Send integer sound value to reduce message byte size\n        socket.emit('SV', Math.round(self.averageVolume*10000))\n\n        // Plot\n        self.plotEnergyHistogram(self);\n\n        // self.bassesAverageVolume = getAverageVolume(array, 32);\n        self.maxVolume = Math.max(self.maxVolume, self.averageVolume);\n        self.averageRelativeVolume = Math.min(1, self.averageVolume / (self.maxVolume || 1))\n      }\n      self.processRawInterval = setTimeout(computeVolume, interval);\n    }, interval);\n\n\n    function createAnalyzer(stream) {\n      self.stream = stream;\n\n      if(!window.singletonAudioContext){\n        console.log(\"Creating singleton audio context\");\n        window.singletonAudioContext = window.webkitAudioContext ? new webkitAudioContext() : new AudioContext();\n      }\n\n      self.audioContext = window.singletonAudioContext;\n      self.mediaStreamSource = self.audioContext.createMediaStreamSource(stream);\n\n      self.mediaStreamSource.connect(createAudioMeter(self.audioContext));\n      return;\n      /*\n      self.analyser = self.audioContext.createAnalyser();\n      self.analyser.smoothingTimeConstant = 0.0;\n      self.analyser.fftSize = 512;\n\n      self.audioProcessorNode = self.audioContext.createScriptProcessor(self.analyser.frequencyBinCount, 1, 1);\n      */\n\n      let lastTime = new Date();\n      //self.audioProcessorNode.onaudioprocess = function(e) {\n      self.processInterval = setTimeout(function computeSoundStats(){\n        if(self.state.micOn && socket.connected) {\n          //var sample = e.inputBuffer.getChannelData(0);\n\n          // get the average, bincount is fftsize / 2\n          var byteFrequencyData = new Uint8Array(self.analyser.frequencyBinCount);\n          self.analyser.getByteFrequencyData(byteFrequencyData);\n\n          // calculate average\n          self.averageVolume = getAverageVolume(byteFrequencyData, 0, null);\n\n          // Send integer sound value to reduce message byte size\n          socket.emit('SV', Math.round(self.averageVolume*10000))\n\n          // Plot\n          self.plotEnergyHistogram(self);\n\n          // self.bassesAverageVolume = getAverageVolume(array, 32);\n          self.maxVolume = Math.max(self.maxVolume, self.averageVolume);\n          self.averageRelativeVolume = Math.min(1, self.averageVolume / (self.maxVolume || 1))\n        }\n        // console.log(\"Last audio: \" + (new Date() - lastTime) + \"ms \"+self.averageVolume)\n        self.processInterval = setTimeout(computeSoundStats, 25);\n        lastTime = new Date();\n\n      }, 25);\n\n      // stream -> mediaSource -> analyser -> javascriptNode -> destination\n      self.mediaStreamSource.connect(self.analyser);\n      self.analyser.connect(self.audioProcessorNode);\n      self.audioProcessorNode.connect(self.audioContext.destination);\n    }\n  }\n\n  createHistogramCanvas() {\n    let c = document.getElementById(\"music\");\n    this.canvasCtx = c.getContext(\"2d\");\n    this.canvasCtx.clearRect(0, 0, this.canvasCtx.canvas.width, this.canvasCtx.canvas.height);\n    this.frame = 0;\n  }\n\n  componentWillUnmount() {\n    //this.stopCurrent()\n  }\n\n  componentDidUpdate(oldProps, oldState) {\n    if (oldState.func !== this.state.func) {\n      //this.startCurrent()\n    }\n  }\n\n  handleProgramClick(key, ev) {\n    ev.preventDefault()\n    this.setCurrentProgram(key)\n  }\n\n  plotEnergyHistogram() {\n    let histogram = document.getElementById(\"music\");\n\n    let h = Math.round(this.averageVolume / (this.maxVolume || 1) * 100);\n    this.canvasCtx.fillStyle = `hsl(${Math.round((1 - h/100 % 1 + 0)*255)}, ${50}%, ${50}%)`;\n    // this.canvasCtx.fillStyle = `#ff5500`;\n    this.canvasCtx.fillRect(300, 100 - h, 2, h);\n    // Move all left\n    let imageData = this.canvasCtx.getImageData(2, 0, this.canvasCtx.canvas.width - 1, this.canvasCtx.canvas.height);\n    this.canvasCtx.putImageData(imageData, 0, 0);\n    // now clear the right-most pixels:\n    this.canvasCtx.clearRect(this.canvasCtx.canvas.width - 2, 0, 2, this.canvasCtx.canvas.height);\n\n    this.canvasCtx.fillStyle = 'white'\n    this.canvasCtx.font = \"12px monospace\";\n    this.canvasCtx.clearRect(this.canvasCtx.canvas.width - 100, 0, 100, this.canvasCtx.canvas.height);\n    this.canvasCtx.fillText(`MAX Vol: ${Math.round(this.maxVolume*100)}`, 310, 15);\n    this.canvasCtx.fillText(`    Vol: ${Math.round(this.averageVolume*100)}`, 310, 30);\n    this.canvasCtx.fillText(`REL Vol: ${Math.round(this.averageRelativeVolume*100)}`, 310, 45);\n  }\n\n  turnOn(){\n    this.setState({micOn: true});\n    noSleep.enable();\n    alert(\"No se duerme\")\n  }\n\n  turnOff(){\n    this.setState({micOn: false})\n    this.maxVolume = 0.00001\n    noSleep.disable();\n  }\n\n  render() {\n    let buttonAction = null;\n\n    if (this.state.micOn) {\n      buttonAction = <a href=\"#\" onClick={e => this.turnOff()}>TURN MIC OFF</a>\n    } else {\n      buttonAction = <a href=\"#\" onClick={e => this.turnOn()}>TURN MIC ON</a>\n    }\n    return <div className=\"mic-client\">\n      <div className=\"buttons\">MIC CLIENT &nbsp; &nbsp; {this.state.connected} {buttonAction}\n      </div>\n      <canvas id=\"music\" width=\"400\" height=\"100\">a</canvas>\n    </div>\n  }\n}"]}