{"version":3,"sources":["../microphoneViewer.jsx"],"names":[],"mappings":"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","file":"microphoneViewer.js","sourcesContent":["if (!window.socket) {\n  window.socket = io();\n}\n\nclass MicrophoneViewer extends React.Component {\n  constructor() {\n    super(...arguments)\n\n    this.state = {\n      micOn: true,\n      connected: false,\n    }\n  }\n\n  _initializeState(state) {\n    this.setState({\n      connected: true,\n    })\n  }\n\n  _stateChange(state) {\n    this.setState({\n      selected: state.currentProgramName,\n      currentConfig: state.currentConfig,\n      remoteChange: true\n    })\n    console.log(state)\n  }\n\n  componentDidMount() {\n    socket.on('micViewerReady', this._initializeState.bind(this));\n\n    socket.on('micSample', ({level, max}) => {\n      this.plotEnergyHistogram(level, max);\n    });\n\n    this.createHistogramCanvas()\n  }\n\n  createHistogramCanvas() {\n    let c = document.getElementById(\"music\");\n    this.canvasCtx = c.getContext(\"2d\");\n    this.canvasCtx.clearRect(0, 0, this.canvasCtx.canvas.width, this.canvasCtx.canvas.height);\n    this.frame = 0;\n  }\n\n  componentWillUnmount() {\n    //this.stopCurrent()\n  }\n\n  componentDidUpdate(oldProps, oldState) {\n    if (oldState.func !== this.state.func) {\n      //this.startCurrent()\n    }\n  }\n\n  handleProgramClick(key, ev) {\n    ev.preventDefault()\n    this.setCurrentProgram(key)\n  }\n\n  plotEnergyHistogram(level, max) {\n    let histogram = document.getElementById(\"music\");\n\n    let h = Math.round(level * 50);\n    this.canvasCtx.fillStyle = `hsl(${Math.round((1 - h/50 % 1 + 0)*255)}, ${50}%, ${50}%)`;\n    // this.canvasCtx.fillStyle = `#ff5500`;\n    this.canvasCtx.fillRect(300, 50 - h, 2, h);\n    // Move all left\n    let imageData = this.canvasCtx.getImageData(2, 0, this.canvasCtx.canvas.width - 1, this.canvasCtx.canvas.height);\n    this.canvasCtx.putImageData(imageData, 0, 0);\n    // now clear the right-most pixels:\n    this.canvasCtx.clearRect(this.canvasCtx.canvas.width - 2, 0, 2, this.canvasCtx.canvas.height);\n\n    this.canvasCtx.fillStyle = 'white'\n    this.canvasCtx.font = \"12px monospace\";\n    this.canvasCtx.clearRect(this.canvasCtx.canvas.width - 100, 0, 100, this.canvasCtx.canvas.height);\n    this.canvasCtx.fillText(`MAX Vol: ${Math.round(max*100)}`, 310, 15);\n    // this.canvasCtx.fillText(`    Vol: ${Math.round(this.averageVolume*100)}`, 310, 30);\n    this.canvasCtx.fillText(`REL Vol: ${Math.round(level*100)}`, 310, 45);\n  }\n\n  turnOn(){\n    this.setState({micOn: true});\n    alert(\"No se duerme\")\n  }\n\n  turnOff(){\n    this.setState({micOn: false})\n  }\n\n  render() {\n    return <div className=\"mic-client\">\n      <canvas id=\"music\" width=\"400\" height=\"50\">a</canvas>\n    </div>\n  }\n}"]}