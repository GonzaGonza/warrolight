{"version":3,"sources":["lightsSimulator.jsx"],"names":[],"mappings":"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","file":"lightsSimulator.js","sourcesContent":["if (!window.socket) {\n    window.socket = io();\n}\n\nclass LightsSimulator extends React.Component {\n    constructor() {\n        super(...arguments)\n\n        this.state = {\n            renderingEnabled: false\n        }\n\n        this.lastFrameTime = performance.now();\n        this.lastFPS = 0;\n        this.frameCount = 0;\n\n        this.onVisibilityChange = this.onVisibilityChange.bind(this);\n        this.onFocusChange = this.onFocusChange.bind(this);\n    }\n\n    turnOnSimulation() {\n        socket.emit('startSamplingLights', (layout) => {\n            this.geometryX = layout.geometry.x\n            this.geometryY = layout.geometry.y\n            this.minX = _.min(this.geometryX)\n            this.minY = _.min(this.geometryY)\n            this.maxX = _.max(this.geometryX)\n            this.maxY = _.max(this.geometryY)\n        });\n    }\n\n    turnOffSimulation() {\n        socket.emit('stopSamplingLights', (layout) => {});\n    }\n\n    decodeLedsColorsFromString(encodedLights) {\n      let bytes = Uint8Array.from(atob(encodedLights), c => c.charCodeAt(0))\n\n      let byLed = new Array(bytes.length / 3);\n      for (let i = 0; i < bytes.length/3; i += 1) {\n        byLed[i] = [bytes[i*3], bytes[i*3 + 1], bytes[i*3 + 2]];\n      }\n      return byLed;\n    }\n\n    onVisibilityChange() {\n      if(document.hidden && this.state.renderingEnabled) {\n        this.turnOffSimulation();\n      } else if (!document.hidden && this.state.renderingEnabled) {\n        this.turnOnSimulation();\n      }\n    }\n\n    onFocusChange() {\n      debugger;\n      if(!document.hasFocus() && this.state.renderingEnabled) {\n        this.turnOffSimulation();\n      } else if (document.hasFocus() && this.state.renderingEnabled) {\n        this.turnOnSimulation();\n      }\n    }\n\n    componentDidMount() {\n        socket.on('lightsSample', (encodedLights) => {\n          const lights = this.decodeLedsColorsFromString(encodedLights)\n          console.log(\"Lights data\")\n            this.drawCanvas(lights)\n        });\n\n        document.addEventListener('visibilitychange', this.onVisibilityChange);\n        document.onblur = this.onFocusChange;\n        document.onfocus = this.onFocusChange;\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('visibilitychange', this.onVisibilityChange);\n        // document.removeEventListener('blur', this.onFocusChange);\n        //this.stopCurrent()\n    }\n\n    componentDidUpdate(oldProps, oldState) {\n        if (oldState.func !== this.state.func) {\n            //this.startCurrent()\n        }\n    }\n\n    drawCanvas(lights) {\n        const drawStartTime = performance.now();\n\n        const leds = this.geometryX.length;\n        const ctx = this.refs.canvas.getContext('2d');\n\n        ctx.globalCompositeOperation = 'source-over';\n        ctx.fillStyle = 'black';\n        ctx.fillRect(0, 0, this.props.width, this.props.height);\n\n        ctx.globalCompositeOperation = 'lighter';\n\n        if (this.state.renderingEnabled) {\n            const X = this.geometryX;\n            const Y = this.geometryY;\n\n            for (let i = 0; i < leds; i++) {\n                const [r, g, b] = lights[i];\n\n              let SCALE = 4;\n                const x = X[i]*SCALE + 5*SCALE;\n                const y = Y[i]*SCALE + 5*SCALE;\n\n                let power = r + g + b;\n                if (power < 0) power = 0;\n\n                let lightRadius = (40 + (r + g + b) / (255 * 3) * 80) * 1;\n\n                let m = 2;\n                if (power < 200) {\n                    m = 4;\n                } else if (power < 100) {\n                    m = 8;\n                } else if (power < 50) {\n                    m = 16;\n                }\n                let [or, og, ob] = [r * m, g * m, b * m];\n                if (or > 255) or = 255;\n                if (og > 255) og = 255;\n                if (ob > 255) ob = 255;\n\n                ctx.beginPath();\n\n                lightRadius = lightRadius / 24;\n                ctx.fillStyle = `rgba(${or}, ${og}, ${ob}, 1)`;\n\n                // let gradient = ctx.createRadialGradient(x, y, 0, x, y, lightRadius)\n                // gradient.addColorStop(0,     `rgba(${or}, ${og}, ${ob}, 1)`)\n                // // gradient.addColorStop(0.065, `rgba(${or}, ${og}, ${ob}, 1)`)\n                // gradient.addColorStop(0.25, `rgba(${r}, ${g}, ${b}, 1)`)\n                // // gradient.addColorStop(0.25,  `rgba(${r}, ${g}, ${b}, 0.5)`)\n                // gradient.addColorStop(0.5,   `rgba(${r}, ${g}, ${b}, 0.25)`)\n                // // gradient.addColorStop(1,     `rgba(${0}, ${0}, ${0}, 1)`)\n                // gradient.addColorStop(1,   `rgba(${r}, ${g}, ${b}, 0)`)\n                // ctx.fillStyle = gradient\n\n\n                ctx.arc(x, y, lightRadius, Math.PI * 2, false);\n                ctx.fill();\n            }\n\n            this.frameCount++;\n\n            let drawMilliseconds = performance.now() - drawStartTime;\n            let timeSinceLastFPS = performance.now() - this.lastFrameTime;\n            if (timeSinceLastFPS > 100) {\n                this.lastFPS = 1000 * this.frameCount / timeSinceLastFPS;\n                this.frameCount = 0;\n                this.lastFrameTime = performance.now();\n            }\n\n            ctx.fillStyle = 'white';\n            ctx.font = \"12px sans-serif\";\n\n            ctx.fillText(`Sim overhead FPS: ${Math.floor(1000/drawMilliseconds)}`, 10, 40);\n            ctx.fillText(`FPS: ${this.lastFPS.toFixed(1)}`, 10, 20);\n        }\n    }\n\n    __changeSelection() {\n        if(this.state.renderingEnabled) {\n          this.turnOffSimulation();\n        } else {\n          this.turnOnSimulation();\n        }\n        this.setState({renderingEnabled: !this.state.renderingEnabled});\n    }\n\n    render() {\n        return <div className=\"lights-sim\">\n            <div>\n                <input type=\"checkbox\" data-id={'renderToggle'} checked={this.state.renderingEnabled}\n                       onChange={this.__changeSelection.bind(this)}/><label>Simular</label>\n            </div>\n            <canvas ref=\"canvas\" width={this.props.width} height={this.props.height}/>\n        </div>\n    }\n}"]}