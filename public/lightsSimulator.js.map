{"version":3,"sources":["lightsSimulator.jsx"],"names":["window","socket","io","hexToRgb","hex","result","hexRegex","exec","parseInt","LightsSimulator","React","Component","constructor","arguments","state","renderingEnabled","lastFrameTime","performance","now","lastFPS","frameCount","componentDidMount","emit","layout","geometryX","geometry","x","geometryY","y","minX","_","min","minY","maxX","max","maxY","on","lights","drawCanvas","componentWillUnmount","componentDidUpdate","oldProps","oldState","func","drawStartTime","leds","length","ctx","refs","canvas","getContext","globalCompositeOperation","fillStyle","fillRect","props","width","height","X","Y","i","color","undefined","r","g","b","power","lightRadius","m","or","og","ob","beginPath","gradient","createRadialGradient","addColorStop","arc","Math","PI","fill","drawMilliseconds","timeSinceLastFPS","font","fillText","floor","toFixed","__changeSelection","setState","render","bind"],"mappings":"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","file":"lightsSimulator.js","sourcesContent":["if (!window.socket) {\r\n    window.socket = io();\r\n}\r\n\r\nfunction hexToRgb(hex) {\r\n    let result = hexRegex.exec(hex);\r\n    return result ? [parseInt(result[1], 16), parseInt(result[2], 16), parseInt(result[3], 16)] : null\r\n}\r\n\r\nclass LightsSimulator extends React.Component {\r\n    constructor() {\r\n        super(...arguments)\r\n\r\n        this.state = {\r\n            renderingEnabled: true\r\n        }\r\n\r\n        this.lastFrameTime = performance.now();\r\n        this.lastFPS = 0;\r\n        this.frameCount = 0;\r\n    }\r\n\r\n    componentDidMount() {\r\n        socket.emit('startSamplingLights', (layout) => {\r\n            this.geometryX = layout.geometry.x\r\n            this.geometryY = layout.geometry.y\r\n            this.minX = _.min(this.geometryX)\r\n            this.minY = _.min(this.geometryY)\r\n            this.maxX = _.max(this.geometryX)\r\n            this.maxY = _.max(this.geometryY)\r\n        });\r\n\r\n        socket.on('lightsSample', (lights) => {\r\n            this.drawCanvas(lights)\r\n        });\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        //this.stopCurrent()\r\n    }\r\n\r\n    componentDidUpdate(oldProps, oldState) {\r\n        if (oldState.func !== this.state.func) {\r\n            //this.startCurrent()\r\n        }\r\n    }\r\n\r\n    drawCanvas(lights) {\r\n        const drawStartTime = performance.now();\r\n\r\n        const leds = this.geometryX.length;\r\n        const ctx = this.refs.canvas.getContext('2d');\r\n\r\n        ctx.globalCompositeOperation = 'source-over';\r\n        ctx.fillStyle = 'black';\r\n        ctx.fillRect(0, 0, this.props.width, this.props.height);\r\n\r\n        ctx.globalCompositeOperation = 'lighter';\r\n\r\n        if (this.state.renderingEnabled) {\r\n            const X = this.geometryX;\r\n            const Y = this.geometryY;\r\n\r\n            for (let i = 0; i < leds; i++) {\r\n                const color = lights[i];\r\n                if (color === undefined) {\r\n                    return;\r\n                }\r\n                const [r, g, b] = hexToRgb(color);\r\n                const x = X[i]*9 + 50;\r\n                const y = Y[i]*9 + 50;\r\n\r\n                let power = r + g + b;\r\n                if (power < 0) power = 0;\r\n\r\n                let lightRadius = (40 + (r + g + b) / (255 * 3) * 80) * 1;\r\n\r\n                let m = 2;\r\n                if (power < 200) {\r\n                    m = 4;\r\n                } else if (power < 100) {\r\n                    m = 8;\r\n                } else if (power < 50) {\r\n                    m = 16;\r\n                }\r\n                let [or, og, ob] = [r * m, g * m, b * m];\r\n                if (or > 255) or = 255;\r\n                if (og > 255) og = 255;\r\n                if (ob > 255) ob = 255;\r\n\r\n                ctx.beginPath();\r\n\r\n                lightRadius = lightRadius / 6;\r\n                ctx.fillStyle = `rgba(${or}, ${og}, ${ob}, 1)`;\r\n\r\n                let gradient = ctx.createRadialGradient(x, y, 0, x, y, lightRadius)\r\n                gradient.addColorStop(0,     `rgba(${or}, ${og}, ${ob}, 1)`)\r\n                // gradient.addColorStop(0.065, `rgba(${or}, ${og}, ${ob}, 1)`)\r\n                gradient.addColorStop(0.25, `rgba(${r}, ${g}, ${b}, 1)`)\r\n                // gradient.addColorStop(0.25,  `rgba(${r}, ${g}, ${b}, 0.5)`)\r\n                gradient.addColorStop(0.5,   `rgba(${r}, ${g}, ${b}, 0.25)`)\r\n                // gradient.addColorStop(1,     `rgba(${0}, ${0}, ${0}, 1)`)\r\n                gradient.addColorStop(1,   `rgba(${r}, ${g}, ${b}, 0)`)\r\n                ctx.fillStyle = gradient\r\n\r\n\r\n                ctx.arc(x, y, lightRadius, Math.PI * 2, false);\r\n                ctx.fill();\r\n            }\r\n\r\n            this.frameCount++;\r\n\r\n            let drawMilliseconds = performance.now() - drawStartTime;\r\n            let timeSinceLastFPS = performance.now() - this.lastFrameTime;\r\n            if (timeSinceLastFPS > 100) {\r\n                this.lastFPS = 1000 * this.frameCount / timeSinceLastFPS;\r\n                this.frameCount = 0;\r\n                this.lastFrameTime = performance.now();\r\n            }\r\n\r\n            ctx.fillStyle = 'white';\r\n            ctx.font = \"12px sans-serif\";\r\n\r\n            ctx.fillText(`Sim overhead FPS: ${Math.floor(1000/drawMilliseconds)}`, 10, 40);\r\n            ctx.fillText(`FPS: ${this.lastFPS.toFixed(1)}`, 10, 20);\r\n        }\r\n    }\r\n\r\n    __changeSelection() {\r\n        this.setState({renderingEnabled: !this.state.renderingEnabled});\r\n    }\r\n\r\n    render() {\r\n        return <div className=\"lights-sim\">\r\n            <div>\r\n                <input type=\"checkbox\" data-id={'renderToggle'} checked={this.state.renderingEnabled}\r\n                       onChange={this.__changeSelection.bind(this)}/><label>Simular</label>\r\n            </div>\r\n            <canvas ref=\"canvas\" width={this.props.width} height={this.props.height}/>\r\n        </div>\r\n    }\r\n}"]}